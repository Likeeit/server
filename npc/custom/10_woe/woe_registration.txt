job3_rune02,39,48,5	script	WoE Registration	80,{
	set .@name$, "[WoE Registration]";
	mes .@name$;
	mes "Hello there, have you come to sign up for the War of Emperium?";
	next;
	if (select("Yes:No")==2) {
		mes .@name$;
		mes "Very well.";
		mes "Good day to you.";
		close;
	}
	if (getguildmasterid(getcharid(2)) == getcharid(0)) {
		mes .@name$;
		mes "You are the guild leader.";
		mes "Guild leaders do not need to register for WoE.";
		close;
	}
	set .@guildid, getcharid(2);
	if (!.@guildid) {
		mes .@name$;
		mes "You aren't in a guild.";
		close;
	}
// Code that limits WoE registration to within 1 hour before WoE only. Uncomment if you wish to enable this restriction again.
	for (set .@i, 0; .@i < getarraysize(.woe_day); set .@i, .@i + 1) {
		if (gettime(4) == .woe_day[.@i] && ((gettime(3) == (.woe_hr[.@i]-1) && gettime(2) >= .woe_mn[.@i]) || gettime(3) == .woe_hr[.@i]) || agitcheck())
			break;
		else if (.@i == (getarraysize(.woe_day)-1)) {
			mes .@name$;
			mes "I'm sorry, you can only register 1 hour before WoE.";
			close;
		}
		else
			continue;
	}
	set .@gsize, getarraysize(getd("$@g_"+.@guildid));
	if (.@gsize)
		for (set .@i, 0; .@i < .@gsize; set .@i, .@i + 1) {
			if (getelementofarray(getd("$@g_"+.@guildid), .@i) == getcharid(0)) {
				mes .@name$;
				mes "You've already registered for WoE.";
				mes "Good luck in battle!";
				close;
			}
			else
				continue;
		}
	if (.@gsize > .max_players-1) {
		mes .@name$;
		mes "The WoE roster for your guild is already full, you may not register for WoE.";
		mes "Your guild leader has the power to remove players from the roster.";
		close;
	}
	setd "$@g_"+.@guildid+"["+.@gsize+"]", getcharid(0);
	setd "$@g_"+.@guildid+"n$["+.@gsize+"]", strcharinfo(0);
	mes .@name$;
	mes "You have successfully registered yourself as part of your guild's WoE roster.";
	mes "Good luck in battle.";
	close;
	
	OnPCLoadMapEvent:
 	if (getgmlevel() >= 40 || !agitcheck())
  		end;
	getmapxy(.@map$, .@x, .@y, 0);
	set .@guildid, getcharid(2);
	for (set .@i, 0; .@i < getarraysize(.woe_castles$); set .@i, .@i+1) {
		if (.@map$ != .woe_castles$[.@i])
			continue;
		else {
			if (getguildmasterid(getcharid(2)) == getcharid(0))
				end;
			if (!getarraysize(getd("$@g_"+.@guildid))) {
				warp "SavePoint",0,0;
				message(strcharinfo(0), "You have not registered to participate in WoE. Warped back to save point.");
				end;
			}
			for (set .@a, 0; .@a < getarraysize(getd("$@g_"+.@guildid)); set .@a, .@a +1) {
				if (getelementofarray(getd("$@g_"+.@guildid), .@a) == getcharid(0))
					end;
				else if (.@a == (getarraysize(getd("$@g_"+.@guildid))-1)) {
					warp "SavePoint",0,0;
					message(strcharinfo(0), "You have not registered to participate in WoE. Warped back to save point.");
					end;
				}
				else
					continue;
			}
		}
	}
	end;
	
	OnAgitEnd:
	for (set .@i, 0; .@i<5000; set .@i, .@i + 1) {
		if (getd("$@g_"+.@i)) {
			cleararray getd("$@g_"+.@i),0,(.max_players-1);
			cleararray getd("$@g_"+.@i+"n$"),0,(.max_players-1);
		}
		else
			continue;
	}
	end;
	
	// Config
	OnInit:
	setarray .woe_day[0], 0,  2,  4,  6,  6; // WoE days of the week. (0-6; 0=Sunday, 1=Monday, 2=Tuesday, etc.)
	setarray .woe_hr[0], 12, 16,  5, 14, 22; // WoE hour part of WoE times
	setarray .woe_mn[0],  0,  0,  0,  0,  0; // WoE minute part of WoE times
	setarray .woe_castles$[0], "prtg_cas01",
"prtg_cas02",
"prtg_cas03",
"prtg_cas04",
"prtg_cas05",
"aldeg_cas01",
"aldeg_cas02",
"aldeg_cas03",
"aldeg_cas04",
"aldeg_cas05",
"payg_cas01",
"payg_cas02",
"payg_cas03",
"payg_cas04",
"payg_cas05",
"gefg_cas01",
"gefg_cas02",
"gefg_cas03",
"gefg_cas04",
"gefg_cas05",
"arug_cas01",
"arug_cas02",
"arug_cas03",
"arug_cas04",
"arug_cas05",
"schg_cas01",
"schg_cas02",
"schg_cas03",
"schg_cas04",
"schg_cas05"; // WoE Castles. 
	set .max_players, 25; // Max participants in WoE per guild. Includes guild leader (registered by default)
	end;
}

-	script	AtCmd_WoERoster	-1,{
	OnInit:
	bindatcmd("woeroster",strnpcinfo(0)+"::OnTrig");
	set .name$, "[WoE Roster Management]";
	end;
	
	OnTrig:
	mes .name$;
	if (getguildmasterid(getcharid(2)) != getcharid(0)) {
		message(strcharinfo(0), "This command can only be used by guild leaders.");
		close;
	}
//	for (set .@i, 0; .@i < getarraysize(getvariableofnpc(.woe_day, "WoE Registration")); set .@i, .@i + 1) {
//		if (gettime(4) == getvariableofnpc(.woe_day[.@i], "WoE Registration") && ((gettime(3) == (getvariableofnpc(.woe_hr[.@i], "WoE Registration")-1) && gettime(2) >= getvariableofnpc(.woe_mn[.@i], "WoE Registration")) || gettime(3) == getvariableofnpc(.woe_hr[.@i], "WoE Registration")) || agitcheck())
//			break;
//		else if (.@i == (getarraysize(getvariableofnpc(.woe_day, "WoE Registration"))-1)) {
//			mes "This is only accessible 1 hour before WoE.";
//			close;
//		}
//		else
//			continue;
//	}
	mes "Please select a WoE Roster slot to modify";
	set .@guildid, getcharid(2);
	set .@menu$, "";
	for (set .@i, 0; .@i < getvariableofnpc(.max_players, "WoE Registration")-1; set .@i, .@i + 1) {
		if (getelementofarray(getd("$@g_"+.@guildid), .@i))
			set .@menu$, .@menu$+":"+(.@i+1)+". "+getelementofarray(getd("$@g_"+.@guildid+"n$"), .@i);
		else {
			set .@menu$, .@menu$+":"+(.@i+1)+". Empty";
			break;
		}
	}
	set .@chosen, select(.@menu$)-2;
	set .@chosen_id, getelementofarray(getd("$@g_"+.@guildid), .@chosen);
	set .@chosen_name$, getelementofarray(getd("$@g_"+.@guildid+"n$"), .@chosen);
	cleararray .@gmembername$, 0, getarraysize(.@gmembername$);
	cleararray .@gmemberid, 0, getarraysize(.@gmemberid);
	cleararray .@validgmemberid, 0, getarraysize(.@validgmemberid);
	cleararray .@validgmembername$, 0, getarraysize(.@validgmembername$);
	if (getelementofarray(getd("$@g_"+.@guildid), .@chosen)) {
		mes "You have selected ^FF0000"+.@chosen_name$+"^000000.";
		mes "Choose an action.";
		switch(select("Remove from roster:Switch with another guild member:Back")) {
			case 1:
				getmapxy(.@map$, .@x, .@y, 0, .@chosen_name$);
				for (set .@i, 0; .@i < getarraysize(getvariableofnpc(.woe_castles$, "WoE Registration")); set .@i, .@i + 1) {
					if (.@map$ == getelementofarray(getvariableofnpc(.woe_castles$, "WoE Registration"), .@i)) {
						mes "^FF0000Unable to remove member from roster, player is inside castle.^000000";
						next;
						goto OnTrig;
					}
					else if (.@i == (getarraysize(getvariableofnpc(.woe_castles$, "WoE Registration"))-1)) {
						setd "$@g_"+.@guildid+"["+.@chosen+"]", 0;
						setd "$@g_"+.@guildid+"n$["+.@chosen+"]", "";
						callsub S_RefreshRoster, "$@g_"+.@guildid, "$@g_"+.@guildid+"n$";
					}
					else
						continue;
				}
				next;
				goto OnTrig;
				break;

			case 2:
			set .@gmenu$, "";
			getguildmember(getcharid(2),0);
			for (set .@i, 0; .@i < getarraysize($@guildmembername$); set .@i, .@i + 1) {
				set .@gmembername$[.@i], $@guildmembername$[.@i];
				set .@gmemberid[.@i], getcharid(0, .@gmembername$[.@i]);
			}
			cleararray $@guildmembername$, "", getarraysize($@guildmembername$);
			set .@b, 0;
			for (set .@i, 0; .@i < getarraysize(.@gmemberid); set .@i, .@i + 1) {
				if (getguildmasterid(getcharid(2)) == .@gmemberid[.@i])
					continue;
				for (set .@a, 0; .@a < getarraysize(getd("$@g_"+.@guildid)); set .@a, .@a + 1) {
					if (getelementofarray(getd("$@g_"+.@guildid), .@a) == .@gmemberid[.@i]) {
						break;
					}
					else if (.@a == (getarraysize(getd("$@g_"+.@guildid))-1)) {
						set .@validgmemberid[.@b], .@gmemberid[.@i];
						set .@validgmembername$[.@b], .@gmembername$[.@i];
						set .@gmenu$, .@gmenu$ + ":"+.@gmembername$[.@i];
						set .@b, .@b + 1;
					}
				}
			}
			if (!getarraysize(.@validgmemberid)) {
				mes "^FF0000No valid guild members online.^000000";
				next;
				goto OnTrig;
			}
			mes "Choose a player to replace ^FF0000"+.@chosen_name$+"^000000.";
			set .@newchosen, select(.@gmenu$)-2;
			getmapxy(.@map$, .@x, .@y, 0, .@gmembername$[.@newchosen]);
			for (set .@i, 0; .@i < getarraysize(getvariableofnpc(.woe_castles$, "WoE Registration")); set .@i, .@i + 1) {
				if (.@map$ == getelementofarray(getvariableofnpc(.woe_castles$, "WoE Registration"), .@i)) {
					mes "^FF0000Unable to switch member in roster, player is inside castle.^000000";
					next;
					goto OnTrig;
				}
				else if (.@i == (getarraysize(getvariableofnpc(.woe_castles$, "WoE Registration"))-1)) {
					setd "$@g_"+.@guildid+"["+.@chosen+"]", .@validgmemberid[.@newchosen];
					setd "$@g_"+.@guildid+"n$["+.@chosen+"]", .@validgmembername$[.@newchosen];
				}
				else
					continue;
			}
			mes "Successfully switched roster member ^FF0000"+.@chosen_name$+"^000000 for ^0000FF"+.@validgmembername$[.@newchosen]+"^000000.";
			next;
			goto OnTrig;
			break;

			case 3:
			next;
			goto OnTrig;
			break;
		}
	}
	else {
		mes "You have selected an empty slot.";
		mes "Choose an action.";
		switch(select("Add to roster:Back")) {
			case 1:
			set .@gmenu$, "";
			getguildmember(getcharid(2),0);
			for (set .@i, 0; .@i < getarraysize($@guildmembername$); set .@i, .@i + 1) {
				set .@gmembername$[.@i], $@guildmembername$[.@i];
				set .@gmemberid[.@i], getcharid(0, .@gmembername$[.@i]);
			}
			cleararray $@guildmembername$, "", getarraysize($@guildmembername$);
			set .@b, 0;
			if (getarraysize(getd("$@g_"+.@guildid))) {
				for (set .@i, 0; .@i < getarraysize(.@gmemberid); set .@i, .@i + 1) {
					if (getguildmasterid(getcharid(2)) == .@gmemberid[.@i])
						continue;
					for (set .@a, 0; .@a < getarraysize(getd("$@g_"+.@guildid)); set .@a, .@a + 1) {
						if (getelementofarray(getd("$@g_"+.@guildid), .@a) == .@gmemberid[.@i]) {
							break;
						}
						else if (.@a == (getarraysize(getd("$@g_"+.@guildid))-1)) {
							set .@validgmemberid[.@b], .@gmemberid[.@i];
							set .@validgmembername$[.@b], .@gmembername$[.@i];
							set .@gmenu$, .@gmenu$ + ":"+.@gmembername$[.@i];
							set .@b, .@b + 1;
						}
					}
				}
			}
			else {
				for (set .@i, 0; .@i < getarraysize(.@gmemberid); set .@i, .@i + 1) {
					if (getguildmasterid(getcharid(2)) == .@gmemberid[.@i])
						continue;
					else {
						set .@validgmemberid[.@b], .@gmemberid[.@i];
						set .@validgmembername$[.@b], .@gmembername$[.@i];
						set .@gmenu$, .@gmenu$ + ":"+.@gmembername$[.@i];
						set .@b, .@b + 1;
					}
				}
			}
			if (!getarraysize(.@validgmemberid)) {
				mes "^FF0000No valid guild members online.^000000";
				next;
				goto OnTrig;
			}	
			mes "Choose a player to add to this slot.";
			set .@newchosen, select(.@gmenu$)-2;
			setd "$@g_"+.@guildid+"["+.@chosen+"]", .@validgmemberid[.@newchosen];
			setd "$@g_"+.@guildid+"n$["+.@chosen+"]", .@validgmembername$[.@newchosen];
			mes "Successfully added ^0000FF"+.@validgmembername$[.@newchosen]+"^000000 to the WoE roster.";
			next;
			goto OnTrig;
			break;

			case 2:
			next;
			goto OnTrig;
			break;
		}	
	}
	close;
	end;

	S_RefreshRoster:
	set .@c, 0;
	set .@max, getvariableofnpc(.max_players, "WoE Registration")-1;
	cleararray .@temparray, 0, getarraysize(.@temparray);
	cleararray .@temparrayn$, 0, getarraysize(.@temparrayn$);
	for (set .@x, 0; .@x < .@max; set .@x, .@x + 1) {
		if (getelementofarray(getd(getarg(0)), .@x)) {
			set .@temparray[.@c], getelementofarray(getd(getarg(0)), .@x);
			set .@temparrayn$[.@c], getelementofarray(getd(getarg(1)), .@x);
			set .@c, .@c + 1;
		}
	}
	cleararray getd(getarg(0)),0,(.@max);
	cleararray getd(getarg(1)),0,(.@max);
	copyarray getd(getarg(0)+"[0]"), .@temparray[0], getarraysize(.@temparray);
	copyarray getd(getarg(1)+"[0]"), .@temparrayn$[0], getarraysize(.@temparrayn$);
	return;
	
}

prtg_cas01	mapflag	loadevent
prtg_cas02	mapflag	loadevent
prtg_cas03	mapflag	loadevent
prtg_cas04	mapflag	loadevent
prtg_cas05	mapflag	loadevent

aldeg_cas01	mapflag	loadevent
aldeg_cas02	mapflag	loadevent
aldeg_cas03	mapflag	loadevent
aldeg_cas04	mapflag	loadevent
aldeg_cas05	mapflag	loadevent

payg_cas01	mapflag	loadevent
payg_cas02	mapflag	loadevent
payg_cas03	mapflag	loadevent
payg_cas04	mapflag	loadevent
payg_cas05	mapflag	loadevent

gefg_cas01	mapflag	loadevent
gefg_cas02	mapflag	loadevent
gefg_cas03	mapflag	loadevent
gefg_cas04	mapflag	loadevent
gefg_cas05	mapflag	loadevent

arug_cas01	mapflag	loadevent
arug_cas02	mapflag	loadevent
arug_cas03	mapflag	loadevent
arug_cas04	mapflag	loadevent
arug_cas05	mapflag	loadevent

schg_cas01	mapflag	loadevent
schg_cas02	mapflag	loadevent
schg_cas03	mapflag	loadevent
schg_cas04	mapflag	loadevent
schg_cas05	mapflag	loadevent
