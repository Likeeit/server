//Platinum Skill NPC @ prontera 164 166 is no longer needed.
//Replaced with Job Master NPC with Platinum Skill Function.
prontera,147,195,5	script	Job Master	405,{

menu "Job Change",J_changer, "Baby Job Change",J_bchanger, "Learn Platinum Skills", L_Platinum,"Nevermind",L_partir;

J_changer:
    mes "^ff0000[Job Master]^000000";
    if(Class >= 4054 && Class <= 4085) goto L_max;
    if(SkillPoint != 0) goto L_stats;
    if(JobLevel < 10) goto L_LvError;
    switch(Class){
        case Job_Novice_High:
        case Job_Baby:
        case Job_Novice:
            skill 142,1,0;
            skill 143,1,0;
            mes "Welcome, please select the Job you wish to change into";
            if(lastJob != 0 && Class == Job_Novice_High){
                switch(lastJob){
                    case Job_Knight:
                    case Job_Crusader:
                        set @target_job, Job_Swordman_High;
                        break;
                    case Job_Monk:
                    case Job_Priest:
                        set @target_job, Job_Acolyte_High;
                        break;
                    case Job_Alchemist:
                    case Job_Blacksmith:
                        set @target_job, Job_Merchant_High;
                        break;
                    case Job_Rogue:
                    case Job_Assassin:
                        set @target_job, Job_Thief_High;
                        break;
                    case Job_Wizard:
                    case Job_Sage:
                        set @target_job, Job_Mage_High;
                        break;
                    case Job_Hunter:
                    case Job_Bard:
                    case Job_Dancer:
                        set @target_job, Job_Archer_High;
                        break;
                            }
            } else {
                switch(select("Swordsman","Mage","Archer","Acolyte","Merchant","Thief",
                    "Super Novice","Taekwon","Gunslinger","Ninja")){
                        case 7:
                            if(Class == Job_Novice_High) goto L_noReq;
                            
                            if($@JC_SupNovM > BaseLevel) goto L_BvError;
                            if(Upper == 2)
                                set @target_job, Job_Super_Baby;
                            else
                                set @target_job, Job_SuperNovice;
                            break;
                        case 8:
                            if(Class == Job_Novice_High) goto L_noReq;
                            if(Upper == 2) goto L_noReq;
                            set @target_job, Job_Taekwon;
                            break;
                        case 9:
                        case 10:
                            if(Class == Job_Novice_High || Upper == 2) goto L_noReq;
                            set @target_job, @menu + 15;
                            break;
                        default:
                            set @target_job, @menu;
                            if(Class == Job_Novice_High) set @target_job, @target_job + 4001;
                            break;
                    }
            }
            mes "Are you sure you want to change to " + JobName(@target_job) + "?";
            if(select("No","Yes") == 2){
                    callfunc "Job_Change", @target_job;
                if(@target_job == Job_Gunslinger || @target_job == Job_Ninja || @target_job == Job_Taekwon) {
                    callfunc "F_ClearJobVar";
                } else{
				if($@JC_Plat) callsub Get_Platinum;
		    }
            }
            close;
            break;
        default:
            if(JobLevel < $@JC_MinimumJB) goto L_LvError;
            deletearray @job_opt, getarraysize(@job_opt);
            if(Class < Job_Knight || Class == Job_Taekwon || (Class > Job_Baby && Class < Job_Baby_Knight) || (Class > Job_Novice_High && Class < Job_Lord_Knight)){
                if(lastJob != 0){
                    set @target_job, lastJob + 4001;
                } else {
                    switch(Class){
                        case Job_Swordman_High:
                        case Job_Baby_Swordman:
                        case Job_Swordman:
                            set @job_opt[0], Job_Knight;
                            set @job_opt[1], Job_Crusader;
                            break;
                        case Job_Mage_High:
                        case Job_Baby_Mage:
                        case Job_Mage:
                            set @job_opt[0], Job_Wizard;
                            set @job_opt[1], Job_Sage;
                            break;
                        case Job_Archer_High:
                        case Job_Baby_Archer:
                        case Job_Archer:
                            set @job_opt[0], Job_Hunter;
                            if(Sex == 0)
                                set @job_opt[1], Job_Dancer;
                            else
                                set @job_opt[1], Job_Bard;
                            break;
                        case Job_Acolyte_High:
                        case Job_Baby_Acolyte:
                        case Job_Acolyte:
                            set @job_opt[0], Job_Priest;
                            set @job_opt[1], Job_Monk;
                            break;
                        case Job_Merchant_High:
                        case Job_Baby_Merchant:
                        case Job_Merchant:
                            set @job_opt[0], Job_Blacksmith;
                            set @job_opt[1], Job_Alchemist;
                            break;
                        case Job_Thief_High:
                        case Job_Baby_Thief:
                        case Job_Thief:
                            set @job_opt[0], Job_Assassin;
                            set @job_opt[1], Job_Rogue;
                            break;                        
                        default:
                            set @job_opt[0], Job_Star_Gladiator;
                            set @job_opt[1], Job_Soul_Linker;
                            break;
                    }
                    mes "Welcome, please select the Job you wish to change into";
                    set @target_job, @job_opt[select(JobName(@job_opt[0]), JobName(@job_opt[1]))-1];
                    if(Class > Job_Novice_High && Class < Job_Lord_Knight) set @target_job, @target_job + 4001;
                }
                mes "Are you sure you want to change to " + JobName(@target_job) + "?";
                if(select("No","Yes")==2){

                    callfunc "Job_Change", @target_job;
                    if(@target_job == Job_Star_Gladiator || @target_job == Job_Soul_Linker) {
                        callfunc "F_ClearJobVar";
						close;
                    }
			else{
				if($@JC_Plat) callsub Get_Platinum;
		    }
                }
                close;
            }
            if(checkfalcon() || checkcart() || checkriding()) goto L_remove;
            if((Class >=Job_Knight) && (Class <=Job_Crusader2)){
                mes "Choose your next step";
                if(select("Reborn","Nevermind")==1){
                    
                    if(BaseLevel < 99 || JobLevel < 50) goto L_cantCh;
                    set lastJob, Class;
                    if(Class == Job_Knight2){
                        set lastJob, Job_Knight;
                    } else {
                        if(Class == Job_Crusader2){
                            set lastJob, Job_Crusader;
                        }
                    }
                    Jobchange Job_Novice_High;
                    resetlvl(1);
                    skill 142,1,0;
                    skill 143,1,0;
                    close;
                }
                mes "[^FF0000Job Master^000000]";
				mes "Have a nice day";
				close;
            }
    mes "I'm sorry, there are no further classes for your job.";
    close;
	
J_bchanger:
mes "[^FF0000Job Master^000000]";
mes "In order to change to a baby class, you need to be a novice.";
mes "And your job level should be 1.";
next;
if((Class == 0) && (JobLevel == 1))
{
mes "[^FF0000Job Master^000000]";
mes "Would you like to become a Baby Class?";
switch(select("Sure","No thanks"))
{
case 1:
jobchange 4023;
break;
case 2:
mes "[^FF0000Job Master^000000]";
mes "Come back when you change your mind";
break;
}
}
else
mes "[^FF0000Job Master^000000]";
mes "I'm sorry,  you do not meet the requirements to change.";
close;
	
L_cantCh:
    mes "I'm sorry, you do not meet the requirements to change";
    mes "Please come again soon!";
    close;

L_LvError:
    mes "Sorry but your Job Level is not high enough";
    mes "Please come again soon!";
    close;

L_BvError:
    mes "I'm sorry, you do not seem to have enough Base Levels";
    mes "Please come again soon!";
    close;

L_noReq:
    mes "I'm sorry, you do not meet the requirements to change";
    mes "Please come again soon!";
    close;

L_max:
    mes "I'm sorry, there are no further classes for your job.";
    close;

L_stats:
    mes "I'm sorry, please use up all your skill points before changing jobs";
    mes "Please come again soon!";
    close;

L_remove:
    mes "Please remove your cart,falcon or peco";
    mes "Please come again soon!";
    close;

L_Platinum:
	mes "^ff0000[Job Master]^000000";
	mes "You have now learned all of your Platinum Skills!";
	skill 142,1,0;
	callsub Get_Platinum;
	close;

OnInit:
    // Variable Setup
    set $@JC_MinimumJB, 40; //Minimum Job level for changing between 2nd and advance Class (Default : 40)
    set $@JC_Plat, 1; //Give Platinum skills on Jobchange (Default : 1-yes)
    set $@JC_SupNovM, 45; //Base Level to change into Super Novice (Default : 45)
    end;

Get_Platinum:
            skill 142,1,0;
	switch(BaseClass) {
		case 0: if (Class !=23) skill 143,1,0; break;
		case 1: skill 144,1,0; skill 145,1,0; skill 146,1,0; break;
		case 2: skill 157,1,0; break;
		case 3: skill 147,1,0; skill 148,1,0; break;
		case 4: skill 156,1,0; break;
		case 5: skill 153,1,0; skill 154,1,0; skill 155,1,0; break;
		case 6: skill 149,1,0; skill 150,1,0; skill 151,1,0; skill 152,1,0; break;
		default: break; }
	switch(roclass(eaclass()&EAJ_UPPERMASK)) {
		case 7: skill 1001,1,0; break;
		case 8: skill 1014,1,0; break;
		case 9: skill 1006,1,0; break;
		case 10: skill 1012,1,0; skill 1013,1,0; break;
		case 11: skill 1009,1,0; break;
		case 12: skill 1003,1,0; skill 1004,1,0; break;
		case 14: skill 1002,1,0; break;
		case 15: skill 1015,1,0; skill 1016,1,0; break;
		case 16: skill 1007,1,0; skill 1008,1,0; skill 1017,1,0; skill 1018,1,0; skill 1019,1,0; break;
		case 17: skill 1005,1,0; break;
		case 18: skill 238,1,0; break;
		case 19: skill 1010,1,0; break;
		case 20: skill 1011,1,0; break;
		default: break; }
	return;

L_partir:
mes "[^FF0000Job Master^000000]";
mes "Have a nice day.";
close;
}}